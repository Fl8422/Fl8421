import telebot
from flask import Flask, request, jsonify, render_template
import threading
import requests
import time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"
GOOGLE_API_KEY = "YOUR_GOOGLE_API_KEY"
CSE_ID = "YOUR_CUSTOM_SEARCH_ENGINE_ID"
PASSWORD = "derts8524"

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)
app = Flask(__name__)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
authorized_users = set()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ Google Custom Search API
def google_search(query, num_results=5, extract_text=False, search_type=""):
    search_url = "https://www.googleapis.com/customsearch/v1"
    params = {
        "key": GOOGLE_API_KEY,
        "cx": CSE_ID,
        "q": query,
        "num": num_results,
    }

    if search_type == "image":
        params["searchType"] = "image"

    response = requests.get(search_url, params=params)
    time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

    if response.status_code == 200:
        results = response.json().get("items", [])
        search_results = []

        for item in results:
            title = item.get("title")
            link = item.get("link")
            snippet = item.get("snippet") if extract_text else ""

            if extract_text:
                search_results.append(f"<b>{title}</b>\n{snippet}\n<a href='{link}'>–°—Å—ã–ª–∫–∞</a>")
            else:
                search_results.append(f"<a href='{link}'>{link}</a>")

        return search_results
    else:
        return [f"–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ Google API. –ö–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {response.status_code}"]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    if message.chat.id in authorized_users:
        bot.send_message(message.chat.id, "–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
        send_main_menu(message)
    else:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
@bot.message_handler(func=lambda message: message.text != "/start")
def password_handler(message):
    if message.text == PASSWORD:
        authorized_users.add(message.chat.id)
        bot.send_message(message.chat.id, "–ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å.")
        send_main_menu(message)
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def send_main_menu(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    search_button = telebot.types.KeyboardButton("–ü–æ–∏—Å–∫ üîç")
    detailed_search_button = telebot.types.KeyboardButton("–ü–æ–¥—Ä–æ–±–Ω—ã–π –ø–æ–∏—Å–∫ üìÑ")
    image_search_button = telebot.types.KeyboardButton("–ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π üñºÔ∏è")
    time_filter_search_button = telebot.types.KeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –¥–∞—Ç–µ üïí")
    site_specific_search_button = telebot.types.KeyboardButton("–ü–æ–∏—Å–∫ –ø–æ —Å–∞–π—Ç—É üåê")
    web_app_button = telebot.types.InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ üåê", url="https://your-web-app-url.com")
    markup.row(search_button, detailed_search_button)
    markup.row(image_search_button, time_filter_search_button)
    markup.row(site_specific_search_button, web_app_button)
    bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–∏—Å–∫–∞
@bot.message_handler(func=lambda message: message.text == "–ü–æ–∏—Å–∫ üîç" and message.chat.id in authorized_users)
def search_request(message):
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:")
    bot.register_next_step_handler(message, search_query)

@bot.message_handler(func=lambda message: message.text == "–ü–æ–¥—Ä–æ–±–Ω—ã–π –ø–æ–∏—Å–∫ üìÑ" and message.chat.id in authorized_users)
def detailed_search_request(message):
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:")
    bot.register_next_step_handler(message, detailed_search_query)

@bot.message_handler(func=lambda message: message.text == "–ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π üñºÔ∏è" and message.chat.id in authorized_users)
def image_search_request(message):
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:")
    bot.register_next_step_handler(message, image_search_query)

@bot.message_handler(func=lambda message: message.text == "–ü–æ–∏—Å–∫ –ø–æ –¥–∞—Ç–µ üïí" and message.chat.id in authorized_users)
def time_filtered_search_request(message):
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –¥–∞—Ç–µ (–Ω–µ–¥–µ–ª—è):")
    bot.register_next_step_handler(message, time_filtered_search_query)

@bot.message_handler(func=lambda message: message.text == "–ü–æ–∏—Å–∫ –ø–æ —Å–∞–π—Ç—É üåê" and message.chat.id in authorized_users)
def site_specific_search_request(message):
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∏ —É–∫–∞–∂–∏—Ç–µ —Å–∞–π—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–Ω–æ—É—Ç–±—É–∫ site:example.com'):")
    bot.register_next_step_handler(message, site_specific_search_query)

# –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞
def search_query(message):
    query = message.text
    bot.send_message(message.chat.id, "–ü–æ–∏—Å–∫...")
    try:
        links = google_search(query, num_results=10, extract_text=False)
        response = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n\n" + "\n\n".join(links)
        bot.send_message(message.chat.id, response, parse_mode="HTML", disable_web_page_preview=True)
    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")

def detailed_search_query(message):
    query = message.text
    bot.send_message(message.chat.id, "–ü–æ–¥—Ä–æ–±–Ω—ã–π –ø–æ–∏—Å–∫...")
    try:
        results = google_search(query, num_results=5, extract_text=True)
        response = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:\n\n" + "\n\n".join(results)
        bot.send_message(message.chat.id, response, parse_mode="HTML", disable_web_page_preview=True)
    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ä–æ–±–Ω–æ–º –ø–æ–∏—Å–∫–µ: {str(e)}")

def image_search_query(message):
    query = message.text
    bot.send_message(message.chat.id, "–ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    try:
        links = google_search(query, num_results=5, extract_text=False, search_type="image")
        response = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:\n\n" + "\n\n".join(links)
        bot.send_message(message.chat.id, response, parse_mode="HTML", disable_web_page_preview=True)
    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {str(e)}")

def time_filtered_search_query(message):
    query = message.text
    bot.send_message(message.chat.id, "–ü–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –¥–∞—Ç–µ...")
    try:
        results = google_search(query + " after:7d", num_results=5, extract_text=False)
        response = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –¥–∞—Ç–µ:\n\n" + "\n\n".join(results)
        bot.send_message(message.chat.id, response, parse_mode="HTML", disable_web_page_preview=True)
    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –¥–∞—Ç–µ: {str(e)}")

def site_specific_search_query(message):
    query = message.text
    if 'site:' in query:
        bot.send_message(message.chat.id, "–ü–æ–∏—Å–∫ –ø–æ —Å–∞–π—Ç—É...")
        try:
            links = google_search(query, num_results=5, extract_text=True)
            response = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ —Å–∞–π—Ç—É:\n\n" + "\n\n".join(links)
            bot.send_message(message.chat.id, response, parse_mode="HTML", disable_web_page_preview=True)
        except Exception as e:
            bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ —Å–∞–π—Ç—É: {str(e)}")
    else:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å —Å —Ñ–æ—Ä–º–∞—Ç–æ–º '–∑–∞–ø—Ä–æ—Å site:example.com'.")

# Flask –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@app.route('/')
def index():
    return render_template('index.html')

@app.route('/search', methods=['POST'])
def web_search():
    data = request.json
    query = data.get('query', '')
    search_type = data.get('search_type', 'standard')
    
    if search_type == "standard":
        results = google_search(query, num_results=10, extract_text=False)
    elif search_type == "detailed":
        results = google_search(query, num_results=5, extract_text=True)
    elif search_type == "image":
        results = google_search(query, num_results=5, extract_text=False, search_type="image")
    elif search_type == "time":
        results = google_search(query + " after:7d", num_results=5, extract_text=False)
    elif search_type == "site":
        results = google_search(query, num_results=5, extract_text=True)
    else:
        results = ["–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–∏—Å–∫–∞."]
    
    return jsonify({"results": results})

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def run_bot():
    bot.polling(none_stop=True)

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ Flask –∏ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
    threading.Thread(target=run_bot).start()
    app.run(host='0.0.0.0', port=5057)
